@model CategoryModel
@using Nop.Core.Domain.Common
@using Nop.Core.Domain.Seo
@using Nop.Web.Framework.Infrastructure
@using System.Text.RegularExpressions;
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@inject CommonSettings commonSettings
@{
    Layout = "_ColumnsTwo";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("categoryList");

    if (seoSettings.CanonicalUrlsEnabled)
    {
        var categoryUrl = Url.RouteUrl("Category", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(categoryUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    var breadcrumbDelimiter = commonSettings.BreadcrumbDelimiter;
}

<header>
    <div class="container-fluid">

        <div class="row">
            <div class="col-12 col-md-4 logoContainer">
                <h1>sinswap</h1>
                <a href="@Url.RouteUrl("HomePage")">
                    <img class="logo" title="Sinning is Winning" alt="Sinswap" src="/Themes/Sinswap/content/images/logoVendor.svg">
                </a>
            </div>

            @await Component.InvokeAsync("Header")

        </div>

        <div class="row">
            <div class="col-12 payoffContainer">
                <div class="payoff">@Model.Name</div>
            </div>
        </div>

        <div class="row">
            <div class="col-12 searchContainer">
                <div class="searchTitle">Find what you're looking for...</div>
    
                @await Component.InvokeAsync("SearchBox")
            </div>
        </div>

    </div>
</header>

<div class="page category-page">
    <div class="page-body">
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsTop, additionalData = Model })
        @*description*@
        @*@if (!string.IsNullOrWhiteSpace(Model.Description))
        {
            <div class="category-description">
                @Html.Raw(Model.Description)
            </div>
        }*@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeSubcategories, additionalData = Model })
        @*subcategories*@
        @if (Model.SubCategories.Count > 0)
        {

            <div class="container firstContainer popularCategoriesContainer">
                <div class="row">
                    <div class="col-12">
                        <h2>@Model.Name</h2>

                        <p class="p-1">Room for a short explanation about our main categories?</p>
                    </div>
                </div>

                <div class="row">
                    <div class="col-12">
                        <div class="flex-row row no-gutters">
                            @foreach (var item in Model.SubCategories)
                            {
                                <div class="col-6 col-lg-3">
                                    <div class="categoryCard @Model.Name.ToLower()" style="background-image: url('@item.PictureModel.ImageUrl')">
                                        <div class="category"><a href="@Url.RouteUrl("Category", new { SeName = item.SeName })" title="@item.PictureModel.Title">@item.Name <span>@item.NumberOfVendorsForSubCategory</span></a></div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        }


        @if (Model.Products.Count == 0)
        {
            <div class="container firstContainer topSellersContainer">
                <div class="row">
                    <div class="col-12">
                        <h2>Top @Model.Name Sellers</h2>

                        @await Component.InvokeAsync("TopCategoryVendor", new { categoryId = Model.Id, amount = 10 })

                    </div>
                </div>
            </div>
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFeaturedProducts, additionalData = Model })
        @*featured products*@
        @if (Model.FeaturedProducts.Count > 0)
        {
            <div class="product-grid featured-product-grid">
                <div class="title">
                    <strong>@T("Products.FeaturedProducts")</strong>
                </div>
                <div class="item-grid">
                    @foreach (var item in Model.FeaturedProducts)
                    {
                        <div class="item-box">
                            @await Html.PartialAsync("_ProductBox", item)
                        </div>
                    }
                </div>
            </div>
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsAfterFeaturedProducts, additionalData = Model })
        @if (Model.Products.Count > 0)
        {
            @*static, needs to go to partial*@
            <div class="container firstContainer sellersContainer">
                <div class="row">
                    <div class="col-6 categoryDesc">
                        <h1>@Model.SeName</h1>
                        <p>
                            @if (!string.IsNullOrEmpty(Model.Description))
                            {
                                @Regex.Replace(@Model.Description, "<.*?>", String.Empty)
                            }
                        </p>
                    </div>
                    @await Component.InvokeAsync("CategoryVendor", new { categoryId = Model.Id, modelAlreadyReady = Model.MiniVendorsForCategory })
                </div>

                @{
                    var pager = Html.Pager(Model.PagingFilteringContext).QueryParam("pagenumber");
                }
                @if (!pager.IsEmpty())
                {
                    <div class="pager">
                        @pager
                    </div>
                }

            </div>
            @*@await Html.PartialAsync("_CatalogSelectors", Model.PagingFilteringContext)*@
        }

        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeFilters, additionalData = Model })
        <div class="product-filters">
            @*filtering*@
            @if (Model.PagingFilteringContext.PriceRangeFilter.Enabled)
            {
                @await Html.PartialAsync("_FilterPriceBox", Model.PagingFilteringContext.PriceRangeFilter)
            }
            @*filtering*@
            @if (Model.PagingFilteringContext.SpecificationFilter.Enabled)
            {
                @await Html.PartialAsync("_FilterSpecsBox", Model.PagingFilteringContext.SpecificationFilter)
            }
        </div>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBeforeProductList, additionalData = Model })

        @*        @if (Model.Products.Count > 0)
            {
            <div class="@(Model.PagingFilteringContext.ViewMode == "list" ? "product-list" : "product-grid")">
            <div class="item-grid">
            @foreach (var product in Model.Products)
            {
            <div class="item-box">
            @await Html.PartialAsync("_ProductBox", product)
            </div>
            }
            </div>
            </div>
            }*@
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.CategoryDetailsBottom, additionalData = Model })
    </div>
</div>
