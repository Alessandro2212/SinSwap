@using Nop.Core.Domain.Catalog
@using Nop.Web.Areas.Admin.Models.Catalog

@model ProductSearchModel

@{
    //page title
    ViewBag.Title = T("Admin.Catalog.Products").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Products");
}

<form asp-controller="Product" asp-action="List" method="post">
    <div class="container-fluid shopContainer">
        <div class="row">
            <div class="col-12 p-0">
                <div class="content-header clearfix">
                    @* <a asp-action="Create" class="btn bg-blue">
                    <i class="fa fa-plus-square"></i>
                    @T("Admin.Common.AddNew")
                    </a> *@

                    <div class="btn btn-primary" type="button" data-url="CreateVendorProduct" data-dismiss="modal" data-toggle="modal" data-target=".productVendorModal">
                        <i class="fa fa-plus-square"></i> New item
                    </div>

                    @* @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.ProductListButtons }) *@
                </div>
            </div>
        </div>

        <div class="row deleteSelected">
            <div class="col-12">
                <button type="button" class="btn btn-grey" id="delete-selected">
                    <i class="fa fa-trash-o"></i> Delete selected
                </button>

                <nop-action-confirmation asp-button-id="delete-selected" />
            </div>
        </div>
        <div class="row tableContainer">
            <div class="col-12 p-0">

                <div id="products-grid"></div>

                <script>
                    $(document).ready(function () {
                        $("#products-grid").kendoGrid({
                            dataSource: {
                                type: "json",
                                transport: {
                                    read: {
                                        url: "@Html.Raw(Url.Action("VendorProductList", "Vendor"))",
                                        type: "POST",
                                        dataType: "json",
                                        data: function () {
                                            var data = {
                                                SearchProductName: $('#@Html.IdFor(model => model.SearchProductName)').val(),
                                                SearchCategoryId: $('#SearchCategoryId').val(),
                                                SearchIncludeSubCategories: $('#@Html.IdFor(model => model.SearchIncludeSubCategories)').is(':checked'),
                                                SearchManufacturerId: $('#SearchManufacturerId').val(),
                                                SearchStoreId: $('#SearchStoreId').val(),
                                                SearchWarehouseId: $('#SearchWarehouseId').val(),
                                                SearchVendorId: $('#SearchVendorId').val(),
                                                SearchProductTypeId: $('#SearchProductTypeId').val(),
                                                SearchPublishedId: $('#SearchPublishedId').val()
                                            };
                                            addAntiForgeryToken(data);
                                            return data;
                                        }
                                    }
                                },
                                schema: {
                                    data: "Data",
                                    total: "Total",
                                    errors: "Errors"
                                },
                                error: function (e) {
                                    display_kendoui_grid_error(e);
                                    // Cancel the changes
                                    this.cancelChanges();
                                },
                                pageSize: @(Model.PageSize),
                                serverPaging: true,
                                serverFiltering: true,
                                serverSorting: true
                            },
                            pageable: {
                                refresh: true,
                                pageSizes: [@(Model.AvailablePageSizes)],
                                       
                                @await Html.PartialAsync("_GridPagerMessages")
                            },
                            editable: {
                                confirmation: "@T("Admin.Common.DeleteConfirmation")",
                                mode: "inline"
                            },
                            scrollable: false,
                            dataBound: onDataBound,
                            columns: [
                                {
                                    field: "Id",
                                    headerTemplate: "<input id='mastercheckbox' type='checkbox'/>",
                                    headerAttributes: { style: "text-align:center" },
                                    attributes: { style: "text-align:center" },
                                    template: "<input type='checkbox' value='#:Id#' class='checkboxGroups'/>",
                                    width: 50
                                },
                                {
                                    field: "PictureThumbnailUrl",
                                    title: "&nbsp;",
                                    template: '<img src="#:PictureThumbnailUrl#" />',
                                    attributes: { style: "text-align:center" },
                                    width: 100
                                },
                                {
                                    field: "Name",
                                    title: "Product",
                                    width: 300
                                // }, {
                                //     field: "Sku",
                                //     title: "@T("Admin.Catalog.Products.Fields.Sku")",
                                //     width: 100
                                }, {
                                    field: "Price",
                                    title: "Price",
                                    width: 60,
                                    //if not a grouped product, then display
                                    template: "# if(ProductTypeId != @((int)ProductType.GroupedProduct)) {# #:Price# #}  #"
                                }, {
                                    field: "StockQuantityStr",
                                    title: "In stock",
                                    width: 60
                                // }, {
                                //     field: "ProductTypeName",
                                //     title: "@T("Admin.Catalog.Products.Fields.ProductType")",
                                //     width: 100
                                }, {
                                    field: "Published",
                                    title: "@T("Admin.Catalog.Products.Fields.Published")",
                                    width: 60,
                                    headerAttributes: { style: "text-align:center" },
                                    attributes: { style: "text-align:center" },
                                    template: '# if(Published) {# <i class="fa fa-check true-icon"></i> #} else {# <i class="fa fa-close false-icon"></i> #} #'
                                }, {
                                    field: "Id",
                                    title: "@T("Admin.Common.Edit")",
                                    width: 60,
                                    headerAttributes: { style: "text-align:center" },
                                    attributes: { style: "text-align:center" },
                                    //template: '<a class="btn btn-default" href="Edit/#=Id#"><i class="fa fa-pencil"></i>@T("Admin.Common.Edit")</a>'
                                    template: '<div class="btn btn-default" data-url="VendorProduct/#=Id#" data-dismiss="modal" data-toggle="modal" data-target=".productVendorModal"><i class="fa fa-edit"></i></div>'
                                }
                            ]
                        });
                    });
                </script>
            </div>
        </div>
    </div>

    <script>
        var selectedIds = [];

        $(document).ready(function () {
            //search button
            $('#search-products').click(function () {
                //search
                var grid = $('#products-grid').data('kendoGrid');
                grid.dataSource.page(1); //new search. Set page size to 1
                //grid.dataSource.read(); we already loaded the grid above using "page" function
                //clear selected checkboxes
                $('.checkboxGroups').attr('checked', false).change();
                selectedIds = [];
                return false;
            });

            $("#@Html.IdFor(model => model.SearchProductName)").keydown(function (event) {
                if (event.keyCode === 13) {
                    $("#search-products").click();
                    return false;
                }
            });

            $("#@Html.IdFor(model => model.GoDirectlyToSku)").keydown(function (event) {
                if (event.keyCode === 13) {
                    $("#go-to-product-by-sku").click();
                    return false;
                }
            });
            //delete selected
            $("#delete-selected-action-confirmation-submit-button").bind("click", function () {
                var postData = {
                    selectedIds: selectedIds
                };
                addAntiForgeryToken(postData);
                $.ajax({
                    cache: false,
                    type: "POST",
                    url: "@(Url.Action("DeleteSelected", "Vendor"))",
                    data: postData,
                    complete: function (data) {
                        //reload grid
                        var grid = $('#products-grid').data('kendoGrid');
                        grid.dataSource.read();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert(thrownError);
                    }
                });
                $('#delete-selected-action-confirmation').modal('toggle');
                return false;
            });

            $('#mastercheckbox').click(function () {
                $('.checkboxGroups').attr('checked', $(this).is(':checked')).change();
            });

            //wire up checkboxes.
            $('#products-grid').on('change', 'input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]', function (e) {
                var $check = $(this);
                var checked = jQuery.inArray($check.val(), selectedIds);
                if ($check.is(":checked") == true) {
                    if (checked == -1) {
                        //add id to selectedIds.
                        selectedIds.push($check.val());
                    }
                } else if (checked > -1) {
                    //remove id from selectedIds.
                    selectedIds = $.grep(selectedIds, function (item, index) {
                        return item != $check.val();
                    });
                }
                updateMasterCheckbox();
            });
        });

        function onDataBound(e) {
            $('#products-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').each(function () {
                var currentId = $(this).val();
                var checked = jQuery.inArray(currentId, selectedIds);
                //set checked based on if current checkbox's value is in selectedIds.
                $(this).attr('checked', checked > -1);
            });

            updateMasterCheckbox();
        }

        function updateMasterCheckbox() {
            var numChkBoxes = $('#products-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]').length;
            var numChkBoxesChecked = $('#products-grid input[type=checkbox][id!=mastercheckbox][class=checkboxGroups]:checked').length;
            $('#mastercheckbox').attr('checked', numChkBoxes == numChkBoxesChecked && numChkBoxes > 0);
        }
    </script>
</form>
@*<nop-delete-confirmation asp-button-id="delete-selected" />*@

@*import products form*@
<div id="importexcel-window" class="modal fade" tabindex="-1" role="dialog" aria-labelledby="importexcel-window-title">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="importexcel-window-title">@T("Admin.Common.ImportFromExcel")</h4>
            </div>
            <form asp-controller="Product" asp-action="ImportExcel" method="post" enctype="multipart/form-data">
                <div class="form-horizontal">
                    <div class="modal-body">
                        <ul class="common-list">
                            <li>
                                <em>@T("Admin.Catalog.Products.List.ImportFromExcelTip")</em>
                            </li>
                            <li>
                                <em>@T("Admin.Common.ImportFromExcel.ManyRecordsWarning")</em>
                            </li>
                        </ul>
                        <div class="form-group">
                            <div class="col-md-2">
                                <div class="label-wrapper">
                                    <label class="control-label">
                                        @T("Admin.Common.ExcelFile")
                                    </label>
                                </div>
                            </div>
                            <div class="col-md-10">
                                <input type="file" id="importexcelfile" name="importexcelfile" class="form-control" />
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="submit" class="btn btn-primary">
                            @T("Admin.Common.ImportFromExcel")
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Product" asp-action="ExportXmlSelected" method="post" id="export-xml-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-xml-selected-form #selectedIds').val(ids);
            $('#export-xml-selected-form').submit();
            return false;
        });
    });
</script>

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Product" asp-action="ExportExcelSelected" method="post" id="export-excel-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>

<script>
    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-excel-selected-form #selectedIds').val(ids);
            $('#export-excel-selected-form').submit();
            return false;
        });
    });
</script>

<div class="modal fade productVendorModal" id="productVendorModal" tabindex="-1" role="dialog" aria-labelledby="productModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-body">
            </div>
        </div>
    </div>
</div>