@model FooterModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@inject IWorkContext workContext;

<footer>
    @await Component.InvokeAsync("FooterCategories")

    <div class="container footerMenu">
        <div class="row">
            <img src="/Themes/Sinswap/content/images/18plus.svg" />

            <div class="col-12 d-flex justify-content-center">
                <a href="@Url.RouteUrl("CustomerService")">Customer service</a>
                <a href="@Url.RouteUrl("FAQ")">F.A.Q.</a>
            </div>
        </div>
    </div>

    <div class="container bottomline">
        <div class="row">
            <div class="col-12 col-md-3 d-flex justify-content-center justify-content-md-start">
                <p>&copy; 2020 <strong>sinswap</strong>. All rights reserved.</p>
            </div>

            <div class="col-12 col-md-6 d-flex justify-content-center text-center">
                <p><strong>sinswap</strong> is a free platform for men, women and furries. Got a question ? Feel free to <a href="@Url.RouteUrl("ContactUs")"><u>contact us</u></a>.</p>
            </div>

            <div class="col-12 col-md-3 d-flex justify-content-center justify-content-md-end">
@*                <p><a href="@Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("privacyinfo") })">Privacy policy</a>&nbsp;&nbsp;&nbsp;<a href="@Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("conditionsofuse") })">Terms of use</a></p>
*@                <p><a href="@Url.RouteUrl("PrivacyPolicy")">Privacy policy</a>&nbsp;&nbsp;&nbsp;<a href="@Url.RouteUrl("TermsOfUse")">Terms of use</a></p>

                @*<p> <a href="@Url.RouteUrl("Blog")">@T("Blog")</a></p>*@
            </div>
        </div>
    </div>
    @*<div id="bar-notification">

        </div>*@

</footer>

@await Component.InvokeAsync("Login")
@await Component.InvokeAsync("Register")
@await Component.InvokeAsync("PasswordRecovery")


@*<strong>@T("Footer.Information")</strong>
    <ul class="list">
    @if (Model.SitemapEnabled && Model.DisplaySitemapFooterItem)
    {
    <li><a href="@Url.RouteUrl("Sitemap")">@T("Sitemap")</a></li>
    }
    @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn1).ToList())
    {
    <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
    }
    @if (Model.DisplayContactUsFooterItem)
    {
    <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }
    </ul>*@

@*<strong>@T("Footer.CustomerService")</strong>
    <ul class="list">
    @if (Model.DisplayProductSearchFooterItem)
    {
    <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a> </li>
    }
    @if (Model.NewsEnabled && Model.DisplayNewsFooterItem)
    {
    <li><a href="@Url.RouteUrl("NewsArchive")">@T("News")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogFooterItem)
    {
    <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsFooterItem)
    {
    <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.RecentlyViewedProductsEnabled && Model.DisplayRecentlyViewedProductsFooterItem)
    {
    <li><a href="@Url.RouteUrl("RecentlyViewedProducts")">@T("Products.RecentlyViewedProducts")</a></li>
    }
    @if (Model.CompareProductsEnabled && Model.DisplayCompareProductsFooterItem)
    {
    <li><a href="@Url.RouteUrl("CompareProducts")">@T("Products.Compare.List")</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsFooterItem)
    {
    <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn2).ToList())
    {
    <li><a href="@Url.RouteUrl("Topic", new {SeName = topic.SeName})">@topic.Name</a></li>
    }
    @if (Model.AllowCustomersToCheckGiftCardBalance)
    {
    <li><a href="@Url.RouteUrl("CheckGiftCardBalance")">@T("CheckGiftCardBalance")</a></li>
    }
    </ul>*@

@*<strong>@T("Footer.MyAccount")</strong>
    <ul class="list">
    @if (Model.DisplayCustomerInfoFooterItem)
    {
    <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.DisplayCustomerOrdersFooterItem)
    {
    <li><a href="@Url.RouteUrl("CustomerOrders")">@T("Account.CustomerOrders")</a></li>
    }
    @if (Model.DisplayCustomerAddressesFooterItem)
    {
    <li><a href="@Url.RouteUrl("CustomerAddresses")">@T("Account.CustomerAddresses")</a></li>
    }
    @if (Model.ShoppingCartEnabled && Model.DisplayShoppingCartFooterItem)
    {
    <li><a href="@Url.RouteUrl("ShoppingCart")">@T("ShoppingCart")</a></li>
    }
    @if (Model.WishlistEnabled && Model.DisplayWishlistFooterItem)
    {
    <li><a href="@Url.RouteUrl("Wishlist")">@T("Wishlist")</a></li>
    }
    @if (Model.AllowCustomersToApplyForVendorAccount && Model.DisplayApplyVendorAccountFooterItem)
    {
    <li><a href="@Url.RouteUrl("ApplyVendorAccount")">@T("Vendors.ApplyAccount")</a></li>
    }
    @foreach (var topic in Model.Topics.Where(x => x.IncludeInFooterColumn3).ToList())
    {
    <li><a href="@Url.RouteUrl("Topic", new {SeName = topic.SeName})">@topic.Name</a></li>
    }
    </ul>*@

@*<strong>@T("Footer.FollowUs")</strong>
    @await Component.InvokeAsync("SocialButtons")*@

@*@await Component.InvokeAsync("NewsletterBox")*@

@*<span class="footer-disclaimer">@T("Content.CopyrightNotice", DateTime.Now.Year, Model.StoreName)</span>*@
@*@if (Model.DisplayTaxShippingInfoFooter)
    {
    var inclTax = workContext.TaxDisplayType == TaxDisplayType.IncludingTax;
    <span class="footer-tax-shipping">
    @T(inclTax ? "Footer.TaxShipping.InclTax" : "Footer.TaxShipping.ExclTax", Url.RouteUrl("Topic", new {SeName = Html.GetTopicSeName("shippinginfo")}))
    </span>
    }*@

@if (!Model.HidePoweredByNopCommerce)
{
    @*<div class="footer-powered-by">*@
    @*Would you like to remove the "Powered by nopCommerce" link in the bottom of the footer?
        Please find more info at https://www.nopcommerce.com/copyrightremoval.aspx*@
    //Powered by <a href="https://www.nopcommerce.com/">nopCommerce</a>
    @*</div>*@
}

@*@await Component.InvokeAsync("StoreThemeSelector")*@

@*@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.Footer })*@

<script asp-location="Footer">
    $(document).ready(function () {
        $('.footer-block .title').on('click', function () {
            var e = window, a = 'inner';
            if (!('innerWidth' in window)) {
                a = 'client';
                e = document.documentElement || document.body;
            }
            var result = { width: e[a + 'Width'], height: e[a + 'Height'] };
            if (result.width < 769) {
                $(this).siblings('.list').slideToggle('slow');
            }
        });
    });
</script>

<script asp-location="Footer">
    $(document).ready(function () {
        $('.block .title').on('click', function () {
            var e = window, a = 'inner';
            if (!('innerWidth' in window)) {
                a = 'client';
                e = document.documentElement || document.body;
            }
            var result = { width: e[a + 'Width'], height: e[a + 'Height'] };
            if (result.width < 1001) {
                $(this).siblings('.listbox').slideToggle('slow');
            }
        });
    });
</script>