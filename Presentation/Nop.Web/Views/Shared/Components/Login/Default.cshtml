@model LoginModel
@using System.Net
@using Nop.Core
@inject IWebHelper webHelper

@{
    //title
    //Html.AddTitleParts(T("PageTitle.Login").Text);
    ////page class
    Html.AppendPageCssClassParts("homepage");

    //register URL with return URL (if specified)
    var registerUrl = Url.RouteUrl("Register", null, webHelper.CurrentRequestProtocol);
    if (!string.IsNullOrEmpty(this.Context.Request.Query["returnUrl"]))
    {
        registerUrl = webHelper.ModifyQueryString(registerUrl, "returnurl", this.Context.Request.Query["returnUrl"]);
    }
}

<div class="modal fade loginModal" id="loginModal" tabindex="-1" role="dialog" aria-labelledby="loginModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header text-center">
                <div class="modal-title w-100">
                    <h5 id="loginModalLabel">Sign in to Sinswap@*@T("Account.Login.Welcome")*@</h5>
                </div>

                @await Html.PartialAsync("_ExternalAuthentication.Errors")

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <div class="customer-blocks">
                    <div class="returning-wrapper fieldset">
                        <form asp-route="Login" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post">
                            <div asp-validation-summary="ModelOnly" class="message-error">@T("Account.Login.Unsuccessful")</div>
                            @*<div class="title">
                                <strong>@T("Account.Login.ReturningCustomer")</strong>
                            </div>*@
                            <div class="form-fields">
                                @if (Model.UsernamesEnabled)
                                {
                                    <div class="form-group">
                                        @*<label asp-for="Username" asp-postfix=":"></label>*@
                                        <input asp-for="Username" class="form-control username" autofocus="autofocus" />
                                        <span asp-validation-for="Username"></span>
                                    </div>
                                }
                                else
                                {
                                    <div class="form-group">
                                        @*<label asp-for="Email" asp-postfix=":"></label>*@
                                        <input asp-for="Email" class="form-control email" autofocus="autofocus" placeholder="Email" />
                                        <span asp-validation-for="Email"></span>
                                    </div>
                                }
                                <div class="form-group">
                                    @*<label asp-for="Password" asp-postfix=":"></label>*@
                                    <input asp-for="Password" class="form-control password" placeholder="Password" />
                                    <span asp-validation-for="Password"></span>
                                </div>
                                <div class="form-group reversed">
                                    <input asp-for="RememberMe" />
                                    <label asp-for="RememberMe">Remember me</label>
                                    <span class="forgot-password float-right">
                                        @*<a asp-route="PasswordRecovery" class="btn-text">@T("Account.Login.ForgotPassword")</a>*@
                                        <button type="button" class="btn-text" data-dismiss="modal" data-toggle="modal" data-target="#pwRecoveryModal">@T("Account.Login.ForgotPassword")</button>
                                    </span>
                                </div>
                                @if (Model.DisplayCaptcha)
                                {
                                    <div class="captcha-box">
                                        <nop-captcha />
                                    </div>
                                }
                            </div>
                            <div class="buttons">
                                <input class="btn btn-action" type="submit" value="Sign in" />
                            </div>
                        </form>

                        <!-- Start: Comment if no social login -->
                        <div class="devider">
                            <span>or</span>
                        </div>

                        <a href="#" class="btn btn-light btn-facebook">Continue with Facebook</a>
                        <a href="#" class="btn btn-light btn-google">Continue with Google</a>
                        <a href="#" class="btn btn-light btn-apple">Continue with Apple</a>
                        <!-- End: Comment if no social login -->
                    </div>

                </div>
                <div class="external-authentication">
                    @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
                </div>
                @*@await Component.InvokeAsync("TopicBlock", new { systemName = "LoginRegistrationInfo" })*@
            </div>

            <div class="modal-footer">
                    @if (Model.CheckoutAsGuest)
                    {
                        <div class="new-wrapper checkout-as-guest-or-register-block">
                            <div class="title">
                                <strong>@T("Account.Login.CheckoutAsGuestOrRegister")</strong>
                            </div>
                            <div class="text">
                                @await Component.InvokeAsync("TopicBlock", new { systemName = "CheckoutAsGuestOrRegister" })
                            </div>
                            <div class="buttons">
                                <input type="button" class="button-1 checkout-as-guest-button" onclick="location.href='@Url.RouteUrl("Checkout")'" value="@T("Account.Login.CheckoutAsGuest")" />
                                <input type="button" class="button-1 register-button" onclick="location.href='@registerUrl'" value="@T("Account.Register")" />
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="new-wrapper register-block">
                            @*<div class="title">
                                <strong>@T("Account.Login.NewCustomer")</strong>
                            </div>*@
                            <div class="text">
                                Not a member yet? 
                                @*<a href="@registerUrl" class="btn-text">Join now!@T("Account.Register")</a>*@
                                <button type="button" class="btn-text" data-dismiss="modal" data-toggle="modal" data-target="#registerModal">Join now!</button>
                            </div>
                        </div>
                    }
            </div>
        </div>
    </div>
</div>