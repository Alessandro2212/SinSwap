@model RegisterModel
@using System.Text.Encodings.Web
@using System.Net
@using Nop.Core
@inject IWebHelper webHelper

@{
    //title
    //Html.AddTitleParts(T("PageTitle.Register").Text);
    //page class
    Html.AppendPageCssClassParts("html-registration-page");

    //login URL with return URL (if specified)
    var loginUrl = Url.RouteUrl("Login", null, webHelper.CurrentRequestProtocol);
    if (!string.IsNullOrEmpty(this.Context.Request.Query["returnUrl"]))
    {
        loginUrl = webHelper.ModifyQueryString(loginUrl, "returnurl", this.Context.Request.Query["returnUrl"]);
    }
}

@if (Model.CountryEnabled && Model.StateProvinceEnabled)
{
    <script asp-location="Footer">
        $(document).ready(function () {
            $("#@Html.IdFor(model => model.CountryId)").on('change', function () {
                var selectedItem = $(this).val();
                var ddlStates = $("#@Html.IdFor(model => model.StateProvinceId)");
                var statesProgress = $("#states-loading-progress");
                statesProgress.show();
                $.ajax({
                    cache: false,
                    type: "GET",
                    url: "@(Url.RouteUrl("GetStatesByCountryId"))",
                    data: { "countryId": selectedItem, "addSelectStateItem": "true" },
                    success: function (data) {
                        ddlStates.html('');
                        $.each(data, function (id, option) {
                            ddlStates.append($('<option></option>').val(option.id).html(option.name));
                        });
                        statesProgress.hide();
                    },
                    error: function (xhr, ajaxOptions, thrownError) {
                        alert('Failed to retrieve states.');
                        statesProgress.hide();
                    }
                });
            });
        });
    </script>
}


<div class="modal fade registerModal" id="registerModal" tabindex="-1" role="dialog" aria-labelledby="registerModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-sm" role="document">
        <div class="modal-content">
            <div class="modal-header text-center">
                <div class="modal-title w-100">
                    <h5 id="registerModalLabel">Join Sinswap</h5>
                </div>

                @await Html.PartialAsync("_ExternalAuthentication.Errors")

                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>

            <div class="modal-body">
                <form asp-route="Register" asp-route-returnurl="@Context.Request.Query["ReturnUrl"]" method="post">
                    <div asp-validation-summary="ModelOnly" class="message-error"></div>
                    <div class="fieldset">
                        <div class="form-fields">
                            <div class="btn-container">
                                <label class="switch btn-color-mode-switch">
                                    <input type="checkbox" name="color_mode" id="color_mode" value="1">
                                    <label for="color_mode" data-on="Seller" data-off="Buyer" class="btn-color-mode-switch-inner"></label>
                                </label>
                            </div>
                        </div>
                    </div>
                    <div class="fieldset">
                        <div class="form-fields">
                            <div class="form-group">
                                @*<label asp-for="Email" asp-postfix=":"></label>*@
                                <input asp-for="Email" class="form-control" placeholder="Your email" />
                                @*<nop-required />*@
                                <span asp-validation-for="Email"></span>
                            </div>
                        </div>
                    </div>

                    <div class="buttons">
                        <input type="submit" id="register-button" class="btn btn-action register-next-step-button" value="Join" name="register-button" />
                    </div>
                </form>

                <div class="text footnote">
                    By clicking Join or Join with Google, Facebook or Apple, you agree to Sinswap's Terms
                    of Use and Privacy Policy. Sinswap may send you communications; you can change your
                    preferences in your account settings. We'll never post without your permission.
                </div>

                <!-- Start: Comment if no social singup -->
                <div class="devider">
                    <span>or</span>
                </div>

                <a href="#" class="btn btn-light btn-facebook">Join with Facebook</a>
                <a href="#" class="btn btn-light btn-google">Join with Google</a>
                <a href="#" class="btn btn-light btn-apple">Join with Apple</a>
                <!-- End: Comment if no social signup -->

                <div class="external-authentication">
                    @await Component.InvokeAsync("ExternalMethods", "ExternalAuthentication")
                </div>
            </div>

            <div class="modal-footer">
                <div class="new-wrapper register-block">
                    @*<div class="title">
                        <strong>@T("Account.Login.NewCustomer")</strong>
                    </div>*@
                    <div class="text">
                        Already a member? 
                        @*<a href="@loginUrl" class="btn-text">Sign in@T("Account.Register")</a>*@
                        <button type="button" class="btn-text" data-dismiss="modal" data-toggle="modal" data-target="#loginModal">Sign in</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>