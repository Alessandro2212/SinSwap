@model ProductDetailsModel
@using Microsoft.AspNetCore.Http.Extensions
@using Nop.Core.Domain.Seo;
@inject Nop.Core.IWebHelper webHelper
@inject SeoSettings seoSettings
@{
    Layout = "_ColumnsOne";

    //title
    Html.AddTitleParts(!string.IsNullOrEmpty(Model.MetaTitle) ? Model.MetaTitle : Model.Name);
    //meta
    Html.AddMetaDescriptionParts(Model.MetaDescription);
    Html.AddMetaKeywordParts(Model.MetaKeywords);
    //page class
    Html.AppendPageCssClassParts("html-product-details-page");

    //canonical URL
    if (seoSettings.CanonicalUrlsEnabled)
    {
        var productUrl = Url.RouteUrl("Product", new { SeName = Model.SeName }, webHelper.CurrentRequestProtocol).ToLowerInvariant();
        Html.AddCanonicalUrlParts(productUrl, seoSettings.QueryStringInCanonicalUrlsEnabled);
    }

    //open graph META tags
    if (seoSettings.OpenGraphMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"og:type\" content=\"product\" />");
        Html.AddHeadCustomParts("<meta property=\"og:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:url\" content=\"" + webHelper.GetThisPageUrl(true) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"og:site_name\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
    }

    //Twitter META tags
    if (seoSettings.TwitterMetaTags)
    {
        Html.AddHeadCustomParts("<meta property=\"twitter:card\" content=\"summary\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:site\" content=\"" + Html.Encode(Model.CurrentStoreName) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:title\" content=\"" + Html.Encode(Model.Name) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:description\" content=\"" + Html.Encode(Nop.Core.Html.HtmlHelper.StripTags(Model.MetaDescription)) + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:image\" content=\"" + Model.DefaultPictureModel.ImageUrl + "\" />");
        Html.AddHeadCustomParts("<meta property=\"twitter:url\" content=\"" + webHelper.GetThisPageUrl(true) + "\" />");
    }
}
<!--product breadcrumb-->
@*@section Breadcrumb
    {
    @await Html.PartialAsync("_ProductBreadcrumb", Model.Breadcrumb)
    }*@

@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterBreadcrumb, additionalData = Model })
<div class="container-fluid productDetailContainer">
    <div itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">

        <div class="row" itemscope itemtype="http://schema.org/Product" data-productid="@Model.Id">
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsTop, additionalData = Model })

            <div class="col-6 imgColumn" style="background-image: url('@Model.DefaultPictureModel.ImageUrl') "></div>

            <div class="col-6 descColumn">

                <div class="closeBtn" data-dismiss="modal" aria-label="Close"><i class="far fa-times-circle"></i></div>

                <form asp-route="Product" asp-route-sename="@Model.SeName" method="post" id="product-details-form">

                    <div class="description">
                        @if (!string.IsNullOrEmpty(Model.ShortDescription))
                        {
                            <div class="short-description">
                                @Html.Raw(Model.ShortDescription)
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(Model.FullDescription))
                        {
                            <p itemprop="description">
                                @Html.Raw(Model.FullDescription)
                            </p>
                        }
                    </div>

                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforePictures, additionalData = Model })
                    <!--product pictures-->
                    @*@await Html.PartialAsync("_ProductDetailsPictures", Model)*@
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsAfterPictures, additionalData = Model })
                    @*@await Html.PartialAsync("_Discontinued", Model)*@
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewTop, additionalData = Model })
                    <!--product reviews-->
                    @*@await Html.PartialAsync("_ProductReviewOverview", Model.ProductReviewOverview)*@
                    <!--manufacturers-->
                    @*@await Html.PartialAsync("_ProductManufacturers", Model.ProductManufacturers)*@
                    <!--availability-->
                    @*@await Html.PartialAsync("_Availability", Model)*@
                    <!--SKU, MAN, GTIN, vendor-->
                    @*@await Html.PartialAsync("_SKU_Man_GTIN_Ven", Model)*@
                    <!--delivery-->
                    @await Html.PartialAsync("_DeliveryInfo", Model)
                    <!--sample download-->
                    @*@await Html.PartialAsync("_DownloadSample", Model)*@
                    <div class="variations">
                        <!--attributes-->
                        @{
                            var dataDictAttributes = new ViewDataDictionary(ViewData);
                            dataDictAttributes.TemplateInfo.HtmlFieldPrefix = $"attributes_{Model.Id}";
                            @await Html.PartialAsync("_ProductAttributes", Model.ProductAttributes, dataDictAttributes)
                        }
                    </div>

                    <div class="orderContainer">
                        <div class="row prodRow">
                            <div class="col-8 label p-0" itemprop="name">
                                @Model.Name
                            </div>
                            <div class="col-4 price p-0">
                                @{
                                    var dataDictPrice = new ViewDataDictionary(ViewData);
                                    dataDictPrice.TemplateInfo.HtmlFieldPrefix = $"price_{Model.Id}";
                                    @await Html.PartialAsync("_ProductPrice", Model.ProductPrice, dataDictPrice)

                                    @await Html.PartialAsync("_ProductTierPrices", Model.TierPrices)
                                }
                            </div>
                        </div>
                        <div class="row shippingRow">
                            <div class="col-8 label p-0">
                                Shipping
                            </div>
                            <div class="col-4 price p-0">
                                @Model.AdditionalShippingCharge
                            </div>
                        </div>
                        <div class="row shippingRow">
                            <div class="col-8 label p-0">
                                Amount available
                            </div>
                            <div class="col-4 price p-0">
                                @Model.StockQuantity
                            </div>
                        </div>
                        @{
                            //@if (this.User.Identity.IsAuthenticated)
                            //{
                            var dataDictAddToCart = new ViewDataDictionary(ViewData);
                            dataDictAddToCart.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                            @await Html.PartialAsync("_AddToCart", Model.AddToCart, dataDictAddToCart)
                            //}
                        }
                    </div>

                    <!--gift card-->
                    @*@{
                        var dataDictGiftCard = new ViewDataDictionary(ViewData);
                        dataDictGiftCard.TemplateInfo.HtmlFieldPrefix = $"giftcard_{Model.Id}";
                        @await Html.PartialAsync("_GiftCardInfo", Model.GiftCard, dataDictGiftCard)
                        }*@
                    <!--rental info-->
                    @*@{
                        var dataDictRental = new ViewDataDictionary(ViewData);
                        dataDictRental.TemplateInfo.HtmlFieldPrefix = $"rental_{Model.Id}";
                        @await Html.PartialAsync("_RentalInfo", Model, dataDictRental)
                        }*@
                    <!--wishlist, compare, email a friend-->
                    @*<div class="overview-buttons">
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsBefore, additionalData = Model })
                        @{
                        var dataDictAddToWishlist = new ViewDataDictionary(ViewData);
                        dataDictAddToWishlist.TemplateInfo.HtmlFieldPrefix = $"addtocart_{Model.Id}";
                        @await Html.PartialAsync("_AddToWishlist", Model.AddToCart, dataDictAddToWishlist)
                        }
                        @await Html.PartialAsync("_CompareProductsButton", Model)
                        @await Html.PartialAsync("_ProductEmailAFriendButton", Model)
                        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsInsideOverviewButtonsAfter, additionalData = Model })
                        </div>*@
                    @*@await Html.PartialAsync("_ShareButton", Model)*@
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsOverviewBottom, additionalData = Model })
                    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBeforeCollateral, additionalData = Model })
                    <div class="product-collateral">
                        @await Html.PartialAsync("_ProductSpecifications", Model.ProductSpecifications)
                        @await Html.PartialAsync("_ProductTags", Model.ProductTags)
                    </div>
                    @await Component.InvokeAsync("ProductsAlsoPurchased", new { productId = Model.Id })
                    @await Component.InvokeAsync("RelatedProducts", new { productId = Model.Id })
                </form>

            </div>
            @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.ProductDetailsBottom, additionalData = Model })
        </div>
    </div>


    @*<div class="container-fluid productDetailContainer">
        <div class="row">
        <div class="col-6 imgColumn" style="background-image: url('https://picsum.photos/500/700') "></div>
        <div class="col-6 descColumn">
        <div class="closeBtn" data-dismiss="modal" aria-label="Close"></div>
        <div class="description">
        <p>
        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam eu sollicitudin arcu. Quisque imperdiet scelerisque commodo. Mauris sed interdum quam. In dapibus diam eget interdum congue. Quisque porttitor egestas molestie. Cras at risus sapien. Ut convallis at sapien et sagittis. Vivamus varius facilisis turpis, ut vehicula lectus elementum eu. Vestibulum euismod aliquet sollicitudin. Duis urna massa, tempor vitae viverra id, mattis placerat velit.
        </p>
        </div>
        <div class="variations">
        <form>
        <div class="row">
        <div class="col">
        <div class="form-group">
        <select class="form-control" id="amount">
        <option>- amount -</option>
        <option>1</option>
        <option>2</option>
        <option>3</option>
        <option>4</option>
        <option>5</option>
        </select>
        <select class="form-control" id="size">
        <option>- size -</option>
        <option>xs</option>
        <option>s</option>
        <option>m</option>
        <option>l</option>
        <option>xl</option>
        </select>
        <select class="form-control" id="brand">
        <option>- brand -</option>
        <option>brand1</option>
        <option>brand2</option>
        <option>brand3</option>
        </select>
        </div>
        </div>
        <div class="col">
        <div class="form-group">
        <select class="form-control" id="material">
        <option>- material -</option>
        <option>cotton</option>
        <option>velvet</option>
        <option>polyester</option>
        </select>
        <select class="form-control" id="color">
        <option>- color -</option>
        <option>white</option>
        <option>black</option>
        <option>red</option>
        <option>blue</option>
        <option>green</option>
        </select>
        </div>
        </div>
        </div>
        </form>
        </div>
        <div class="orderContainer">
        Order total
        </div>
        </div>
        </div>
        </div>*@
